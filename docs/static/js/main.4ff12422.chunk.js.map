{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","maxWidth","button","margin","spacing","checkboxLabel","lineHeight","verticalAlign","renderToString","reactTree","d","document","createElement","ReactDOM","render","innerHTML","downloadString","str","type","filename","a","data","Blob","url","window","URL","createObjectURL","download","href","click","App","classes","widthRef","useRef","heightRef","dpiRef","rowsRef","colsRef","fileRef","useState","wrapTiles","setWrapTiles","cutRects","setCutRects","Grid","root","item","xs","TextField","inputRef","defaultValue","fullWidth","Checkbox","checked","onChange","e","target","Button","variant","component","style","display","ref","rows","parseInt","current","value","cols","dpi","width","undefined","height","files","name","reader","FileReader","onload","img","console","log","canvas","context","getContext","tileWidth","tileHeight","r","c","clearRect","drawImage","tileSVGStr","viewBox","xmlns","xmlnsXlink","imageRendering","x","y","xlinkHref","toDataURL","svgURL","btoa","svgStr","key","fill","stroke","strokeOpacity","images","push","src","result","readAsDataURL","Boolean","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ff12422.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactDOM from 'react-dom';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    maxWidth: 300\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  checkboxLabel: {\n    lineHeight: \"40px\",\n    verticalAlign: \"middle\"\n  }\n}));\n\nconst renderToString = (reactTree) => {\n  const d = document.createElement(\"div\");\n  ReactDOM.render(reactTree, d);\n  return d.innerHTML;\n};\n\nconst downloadString = (str, { type, filename }) => {\n  const a = document.createElement('a');\n  const data = new Blob([ str ], { type });\n  const url = window.URL.createObjectURL(data);\n  a.download = filename;\n  a.href = url;\n  a.click();\n};\n\nfunction App() {\n  const classes = useStyles();\n  const widthRef = useRef(null);\n  const heightRef = useRef(null);\n  const dpiRef = useRef(null);\n  const rowsRef = useRef(null);\n  const colsRef = useRef(null);\n  const fileRef = useRef(null);\n  const [ wrapTiles, setWrapTiles ] = useState(true);\n  const [ cutRects, setCutRects ] = useState(false);\n\n  const handleChange = (e) => {\n    const rows = parseInt(rowsRef.current.value) || 2;\n    const cols = parseInt(colsRef.current.value) || 2;\n    const dpi = parseInt(dpiRef.current.value) || 225;\n    let width = widthRef.current.value === \"auto\" ? undefined : parseInt(widthRef.current.value);\n    let height = heightRef.current.value === \"auto\" ? undefined : parseInt(heightRef.current.value);\n\n\n    const filename = e.target.files[0].name;\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = document.createElement('img');\n      img.onload = () => {\n        console.log(img.width, img.height);\n        const canvas = document.createElement(\"canvas\");\n\n        if(!width && height) {\n          width = img.width/img.height*height;\n        }\n\n        if(width && !height) {\n          height = img.height/img.width*width;\n        }\n\n        if(width) {\n          canvas.width = width/cols;\n        } else {\n          canvas.width = img.width/cols;\n        }\n\n        if(height) {\n          canvas.height = height/rows;\n        } else {\n          canvas.height = img.height/rows;\n        }\n\n        const context = canvas.getContext('2d');\n        const tileWidth = img.width/cols;\n        const tileHeight = img.height/rows;\n\n        if(cutRects) {\n          for(let r = 0; r < rows; r++) {\n            for(let c = 0; c < cols; c++) {\n              context.clearRect(0,0,canvas.width, canvas.height);\n              context.drawImage(img, c*tileWidth, r*tileHeight, tileWidth, tileHeight, 0, 0, canvas.width, canvas.height);\n\n              const tileSVGStr = renderToString(\n                <svg width={canvas.width} height={canvas.height} viewBox={\"0 0 \" + canvas.width + \" \" + canvas.height} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n                  <image imageRendering=\"pixelated\" x={0} y={0} width={canvas.width} height={canvas.height} xlinkHref={canvas.toDataURL()}/>\n                </svg>);\n\n              const svgURL = \"data:image/svg+xml;base64,\" + btoa(tileSVGStr);\n\n              const svgStr = renderToString(<svg width={width ? (width/dpi/cols) + \"in\" : (img.width/dpi/cols) + \"in\"} height={height ? (height/dpi/rows) + \"in\" : (img.height/dpi/rows) + \"in\" } viewBox={\"0 0 \" + (width ? width/cols : img.width/cols) + \" \" + (height ? height/rows : img.height/rows)} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n                <image key={`${r},${c}`} imageRendering=\"pixelated\" x={0} y={0} width={canvas.width} height={canvas.height} xlinkHref={svgURL}/>\n                <rect x={0} y={0} width={canvas.width} height={canvas.height} style={{fill: \"none\", stroke: \"black\", strokeOpacity: 1 }}/>\n              </svg>);\n\n              downloadString(svgStr, { type: 'image/svg+xml', filename: filename + \"-\" + r + \"-\" + c + \".svg\" });\n            }\n          }\n        } else {\n          const images = [];\n          for(let r = 0; r < rows; r++) {\n            for(let c = 0; c < cols; c++) {\n              context.clearRect(0,0,canvas.width, canvas.height);\n              context.drawImage(img, c*tileWidth, r*tileHeight, tileWidth, tileHeight, 0, 0, canvas.width, canvas.height);\n\n              if(wrapTiles) {\n                const tileSVGStr = renderToString(\n                  <svg width={canvas.width} height={canvas.height} viewBox={\"0 0 \" + canvas.width + \" \" + canvas.height} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n                    <image imageRendering=\"pixelated\" x={0} y={0} width={canvas.width} height={canvas.height} xlinkHref={canvas.toDataURL()}/>\n                  </svg>);\n\n    //            const svgURL = \"data:image/svg+xml,\" + encodeURIComponent(tileSVGStr);\n                const svgURL = \"data:image/svg+xml;base64,\" + btoa(tileSVGStr);\n                images.push(<image key={`${r},${c}`} imageRendering=\"pixelated\" x={c*canvas.width} y={r*canvas.height} width={canvas.width} height={canvas.height} xlinkHref={svgURL}/>);\n              } else {\n                images.push(<image key={`${r},${c}`} imageRendering=\"pixelated\" x={c*canvas.width} y={r*canvas.height} width={canvas.width} height={canvas.height} xlinkHref={canvas.toDataURL()}/>);\n              }\n            }\n          }\n          const svgStr = renderToString(<svg width={width ? width/dpi + \"in\" : img.width/dpi + \"in\"} height={height ? height/dpi + \"in\" : img.height/dpi + \"in\" } viewBox={\"0 0 \" + (width ? width : img.width) + \" \" + (height ? height : img.height)} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n            {images}\n          </svg>);\n\n          downloadString(svgStr, { type: 'image/svg+xml', filename: filename + \".svg\" });\n        }\n\n//        const svgURL = \"data:image/svg+xml;base64,\" + btoa(svgStr);\n//        const svgStr2 = renderToString(<svg width={width ? width/dpi + \"in\" : img.width/dpi + \"in\"} height={height ? height/dpi + \"in\" : img.height/dpi + \"in\" } viewBox={\"0 0 \" + (width ? width : img.width) + \" \" + (height ? height : img.height)} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n//          <image x={0} y={0} width={(width ? width : img.width)} height={(height ? height : img.height)} xlinkHref={svgURL}/>\n//        </svg>);\n//        downloadString(svgStr2, { type: 'image/svg+xml', filename: filename + \".svg\" });\n\n        fileRef.current.value = \"\";\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  return (\n    <Grid container classes={{ root: classes.container }}>\n      <Grid item xs={6}>DPI:</Grid><Grid item xs={6}><TextField inputRef={dpiRef} defaultValue=\"225\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Width:</Grid><Grid item xs={6}><TextField inputRef={widthRef} defaultValue=\"auto\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Height:</Grid><Grid item xs={6}><TextField inputRef={heightRef} defaultValue=\"auto\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Rows:</Grid><Grid item xs={6}><TextField inputRef={rowsRef} defaultValue=\"2\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Cols:</Grid><Grid item xs={6}><TextField inputRef={colsRef} defaultValue=\"2\" fullWidth={true}/></Grid>\n      <Grid item xs={6} classes={ { root: classes.checkboxLabel }}>Wrap Tiles In SVG:</Grid><Grid item xs={6}><Checkbox checked={wrapTiles} onChange={(e) => setWrapTiles(e.target.checked)}/></Grid>\n      <Grid item xs={6} classes={ { root: classes.checkboxLabel }}>Add Cut Rectangles:</Grid><Grid item xs={6}><Checkbox checked={cutRects} onChange={(e) => setCutRects(e.target.checked)}/></Grid>\n      <Grid item xs={12}><Button fullWidth={true} classes={{ root: classes.button }} variant=\"contained\" component=\"label\">Convert File\n        <input type=\"file\" style={{ display: \"none\" }} ref={fileRef} onChange={handleChange}/>\n      </Button></Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}