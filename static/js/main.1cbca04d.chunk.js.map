{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","maxWidth","button","margin","spacing","App","classes","widthRef","useRef","heightRef","dpiRef","rowsRef","colsRef","fileRef","Grid","root","item","xs","TextField","inputRef","defaultValue","fullWidth","Button","variant","component","type","style","display","ref","onChange","e","rows","parseInt","current","value","cols","dpi","width","undefined","height","filename","target","files","name","reader","FileReader","onload","img","document","createElement","console","log","canvas","context","getContext","tileWidth","tileHeight","images","r","c","clearRect","drawImage","push","key","imageRendering","x","y","xlinkHref","toDataURL","d","ReactDOM","render","viewBox","xmlns","xmlnsXlink","a","data","Blob","innerHTML","url","window","URL","createObjectURL","download","href","click","src","result","readAsDataURL","Boolean","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1cbca04d.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactDOM from 'react-dom';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    maxWidth: 300\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const widthRef = useRef(null);\n  const heightRef = useRef(null);\n  const dpiRef = useRef(null);\n  const rowsRef = useRef(null);\n  const colsRef = useRef(null);\n  const fileRef = useRef(null);\n\n  const handleChange = (e) => {\n    const rows = parseInt(rowsRef.current.value) || 2;\n    const cols = parseInt(colsRef.current.value) || 2;\n    const dpi = parseInt(dpiRef.current.value) || 225;\n    let width = widthRef.current.value === \"auto\" ? undefined : parseInt(widthRef.current.value);\n    let height = heightRef.current.value === \"auto\" ? undefined : parseInt(heightRef.current.value);\n\n    const filename = e.target.files[0].name;\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = document.createElement('img');\n      img.onload = () => {\n        console.log(img.width, img.height);\n        const canvas = document.createElement(\"canvas\");\n\n        if(!width && height) {\n          width = img.width/img.height*height;\n        }\n\n        if(width && !height) {\n          height = img.height/img.width*width;\n        }\n\n        if(width) {\n          canvas.width = width/cols;\n        } else {\n          canvas.width = img.width/cols;\n        }\n\n        if(height) {\n          canvas.height = height/rows;\n        } else {\n          canvas.height = img.height/rows;\n        }\n\n        const context = canvas.getContext('2d');\n        const tileWidth = img.width/cols;\n        const tileHeight = img.height/rows;\n\n        const images = [];\n        for(let r = 0; r < rows; r++) {\n          for(let c = 0; c < cols; c++) {\n            context.clearRect(0,0,canvas.width, canvas.height);\n            context.drawImage(img, c*tileWidth, r*tileHeight, tileWidth, tileHeight, 0, 0, canvas.width, canvas.height);\n            images.push(<g key={`${r},${c}`}><image imageRendering=\"optimizeSpeed\" x={c*canvas.width} y={r*canvas.height} width={canvas.width} height={canvas.height} xlinkHref={canvas.toDataURL()}/></g>);\n          }\n        }\n\n        const d = document.createElement(\"div\");\n        ReactDOM.render(<svg width={width ? width/dpi + \"in\" : img.width/dpi + \"in\"} height={height ? height/dpi + \"in\" : img.height/dpi + \"in\" } viewBox={\"0 0 \" + (width ? width : img.width) + \" \" + (height ? height : img.height)} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n          {images}\n        </svg>, d);\n        const a = document.createElement('a');\n        const data = new Blob([ d.innerHTML ], { type: 'image/svg+xml' });\n        const url = window.URL.createObjectURL(data);\n        a.download = filename + \".svg\";\n        a.href = url;\n        a.click();\n\n        fileRef.current.value = \"\";\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  return (\n    <Grid container classes={{ root: classes.container }}>\n      <Grid item xs={6}>DPI:</Grid><Grid item xs={6}><TextField inputRef={dpiRef} defaultValue=\"225\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Input Width:</Grid><Grid item xs={6}><TextField inputRef={widthRef} defaultValue=\"auto\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Input Height:</Grid><Grid item xs={6}><TextField inputRef={heightRef} defaultValue=\"auto\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Rows:</Grid><Grid item xs={6}><TextField inputRef={rowsRef} defaultValue=\"2\" fullWidth={true}/></Grid>\n      <Grid item xs={6}>Cols:</Grid><Grid item xs={6}><TextField inputRef={colsRef} defaultValue=\"2\" fullWidth={true}/></Grid>\n      <Grid item xs={12}><Button fullWidth={true} classes={{ root: classes.button }} variant=\"contained\" component=\"label\">Convert File\n        <input type=\"file\" style={{ display: \"none\" }} ref={fileRef} onChange={handleChange}/>\n      </Button></Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}